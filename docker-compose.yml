version: "3.9"

x-common: &common
  restart: always
  env_file:
    - .env

services:
  # PostgreSQL Database
  db:
    image: postgres:16
    <<: *common
    volumes:
      - ./mount-data/db:/var/lib/postgresql/data
    ports:
      - "5678:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    networks:
      - app-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fe_app
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - backend-service

  # Backend Service (Main API)
  backend-service:
    build:
      context: ./backend/service
      dockerfile: Dockerfile
    <<: *common
    volumes:
      - ./backend/service/app:/app/app
      - ./backend/service/alembic:/app/alembic
      - ./backend/service/requirements.txt:/app/requirements.txt
      - ./backend/service/static:/app/static
      - ./.env:/app/.env
    ports:
      - "8777:8777"
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8777", "--reload"]
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      alembic-migration:
        condition: service_completed_successfully

  # Database Migration Service
  alembic-migration:
    build:
      context: ./backend/service
      dockerfile: Dockerfile
    <<: *common
    volumes:
      - ./backend/service/app:/app/app
      - ./backend/service/alembic:/app/alembic
      - ./backend/service/requirements.txt:/app/requirements.txt
      - ./.env:/app/.env
    command: ["alembic", "upgrade", "head"]
    restart: "no"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  # AI Clone Service
  ai-clone:
    build:
      context: ./backend/ai_clone
      dockerfile: Dockerfile
    ports:
      - "8779:8779"
    volumes:
      # Essential AI models and checkpoints (large files, must persist)
      - ./backend/ai_clone/ai_models:/app/ai_models
      - ./backend/ai_clone/ai_service/Sonic/checkpoints:/app/ai_service/Sonic/checkpoints
      - ./backend/ai_clone/ai_service/voiceclone_tts/model_english:/app/ai_service/voiceclone_tts/model_english
      - ./backend/ai_clone/ai_service/voiceclone_tts/f5_tts_repo:/app/ai_service/voiceclone_tts/f5_tts_repo
      
      # Resources and examples
      - ./backend/ai_clone/ai_service/Sonic/res_path:/app/ai_service/Sonic/res_path
      - ./backend/ai_clone/ai_service/voiceclone_tts/examples:/app/ai_service/voiceclone_tts/examples
      
      # Output and results (user-generated content)
      - ./backend/ai_clone/ai_service/voiceclone_tts/results:/app/ai_service/voiceclone_tts/results
      - ./backend/ai_clone/public/human_clone:/app/public/human_clone
    
    tmpfs:
      # Temporary files in memory for better performance
      - /app/ai_service/Sonic/tmp_path
      - /app/ai_service/Sonic/output
      - /app/ai_service/voiceclone_tts/uploads
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    
    environment:
      - CUDA_VISIBLE_DEVICES=0,1
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge